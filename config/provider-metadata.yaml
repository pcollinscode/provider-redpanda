name: redpanda-data/redpanda
resources:
    redpanda_acl:
        subCategory: ""
        name: redpanda_acl
        title: redpanda_acl Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                  "host": "*",
                  "operation": "READ",
                  "permission_type": "ALLOW",
                  "principal": "User:${redpanda_user.test.name}",
                  "resource_name": "${redpanda_topic.test.name}",
                  "resource_pattern_type": "LITERAL",
                  "resource_type": "TOPIC"
                }
              references:
                cluster_api_url: redpanda_cluster.test.cluster_api_url
                resource_name: redpanda_topic.test.name
              dependencies:
                redpanda_cluster.test: |-
                    {
                      "allow_deletion": true,
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "connection_type": "public",
                      "name": "${var.cluster_name}",
                      "network_id": "${redpanda_network.test.id}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}",
                      "tags": {
                        "key": "value"
                      },
                      "throughput_tier": "${var.throughput_tier}",
                      "zones": "${var.zones}"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
        argumentDocs:
            cluster_api_url: (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
            host: (String) The host address to use for this ACL
            id: (String) The ID of this resource.
            operation: (String) The operation type that shall be allowed or denied (e.g READ)
            permission_type: (String) The permission type. It determines whether the operation should be ALLOWED or DENIED
            principal: (String) The principal to apply this ACL for
            resource_name: (String) The name of the resource this ACL entry will be on
            resource_pattern_type: (String) The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
            resource_type: (String) The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
        importStatements: []
    redpanda_cluster:
        subCategory: ""
        name: redpanda_cluster
        title: redpanda_cluster Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${var.cloud_provider}",
                  "cluster_type": "dedicated",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${var.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "key": "value"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: var.cloud_provider
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: var.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${var.cloud_provider}",
                  "cluster_type": "dedicated",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${var.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: var.cloud_provider
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: var.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${var.cloud_provider}",
                  "cluster_type": "dedicated",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${var.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "key": "value"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: var.cloud_provider
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: var.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${redpanda_network.test.cloud_provider}",
                  "cluster_type": "${redpanda_network.test.cluster_type}",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${redpanda_network.test.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "key": "value"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: redpanda_network.test.cloud_provider
                cluster_type: redpanda_network.test.cluster_type
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: redpanda_network.test.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "byoc",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${redpanda_network.test.cloud_provider}",
                  "cluster_type": "${redpanda_network.test.cluster_type}",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${redpanda_network.test.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: redpanda_network.test.cloud_provider
                cluster_type: redpanda_network.test.cluster_type
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: redpanda_network.test.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "byoc",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${redpanda_network.test.cloud_provider}",
                  "cluster_type": "${redpanda_network.test.cluster_type}",
                  "connection_type": "public",
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${redpanda_network.test.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "key": "value"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: redpanda_network.test.cloud_provider
                cluster_type: redpanda_network.test.cluster_type
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: redpanda_network.test.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "byoc",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "${redpanda_network.test.cloud_provider}",
                  "cluster_type": "${redpanda_network.test.cluster_type}",
                  "connection_type": "private",
                  "customer_managed_resources": {
                    "aws": {
                      "agent_instance_profile": {
                        "arn": "${module.redpanda_byovpc.agent_instance_profile_arn}"
                      },
                      "aws_permissions_boundary_policy_arn": {
                        "arn": "${module.redpanda_byovpc.permissions_boundary_policy_arn}"
                      },
                      "cloud_storage_bucket": {
                        "arn": "${module.redpanda_byovpc.cloud_storage_bucket_arn}"
                      },
                      "cluster_security_group": {
                        "arn": "${module.redpanda_byovpc.cluster_security_group_arn}"
                      },
                      "connectors_node_group_instance_profile": {
                        "arn": "${module.redpanda_byovpc.connectors_node_group_instance_profile_arn}"
                      },
                      "connectors_security_group": {
                        "arn": "${module.redpanda_byovpc.connectors_security_group_arn}"
                      },
                      "k8s_cluster_role": {
                        "arn": "${module.redpanda_byovpc.k8s_cluster_role_arn}"
                      },
                      "node_security_group": {
                        "arn": "${module.redpanda_byovpc.node_security_group_arn}"
                      },
                      "permissions_boundary_policy": {
                        "arn": "${module.redpanda_byovpc.permissions_boundary_policy_arn}"
                      },
                      "redpanda_agent_security_group": {
                        "arn": "${module.redpanda_byovpc.redpanda_agent_security_group_arn}"
                      },
                      "redpanda_node_group_instance_profile": {
                        "arn": "${module.redpanda_byovpc.redpanda_node_group_instance_profile_arn}"
                      },
                      "redpanda_node_group_security_group": {
                        "arn": "${module.redpanda_byovpc.redpanda_node_group_security_group_arn}"
                      },
                      "utility_node_group_instance_profile": {
                        "arn": "${module.redpanda_byovpc.utility_node_group_instance_profile_arn}"
                      },
                      "utility_security_group": {
                        "arn": "${module.redpanda_byovpc.utility_security_group_arn}"
                      }
                    }
                  },
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${redpanda_network.test.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "key": "value"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                cloud_provider: redpanda_network.test.cloud_provider
                cluster_type: redpanda_network.test.cluster_type
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: redpanda_network.test.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "byoc",
                      "customer_managed_resources": {
                        "aws": {
                          "dynamodb_table": {
                            "arn": "${module.redpanda_byovpc.dynamodb_table_arn}"
                          },
                          "management_bucket": {
                            "arn": "${module.redpanda_byovpc.management_bucket_arn}"
                          },
                          "private_subnets": {
                            "arns": "${module.redpanda_byovpc.private_subnet_arns}"
                          },
                          "vpc": {
                            "arn": "${module.redpanda_byovpc.vpc_arn}"
                          }
                        }
                      },
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cloud_provider": "gcp",
                  "cluster_type": "byoc",
                  "connection_type": "private",
                  "customer_managed_resources": {
                    "gcp": {
                      "agent_service_account": {
                        "email": "${module.redpanda_gcp.agent_service_account_email}"
                      },
                      "connector_service_account": {
                        "email": "${module.redpanda_gcp.connector_service_account_email}"
                      },
                      "console_service_account": {
                        "email": "${module.redpanda_gcp.console_service_account_email}"
                      },
                      "gke_service_account": {
                        "email": "${module.redpanda_gcp.gke_service_account_email}"
                      },
                      "redpanda_cluster_service_account": {
                        "email": "${module.redpanda_gcp.redpanda_cluster_service_account_email}"
                      },
                      "subnet": {
                        "k8s_master_ipv4_range": "${module.redpanda_gcp.k8s_master_ipv4_range}",
                        "name": "${module.redpanda_gcp.subnet_name}",
                        "secondary_ipv4_range_pods": {
                          "name": "${module.redpanda_gcp.secondary_ipv4_range_pods_name}"
                        },
                        "secondary_ipv4_range_services": {
                          "name": "${module.redpanda_gcp.secondary_ipv4_range_services_name}"
                        }
                      },
                      "tiered_storage_bucket": {
                        "name": "${module.redpanda_gcp.tiered_storage_bucket_name}"
                      }
                    }
                  },
                  "depends_on": [
                    "${module.redpanda_gcp}"
                  ],
                  "name": "${var.cluster_name}",
                  "network_id": "${redpanda_network.test.id}",
                  "region": "${var.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "tags": {
                    "environment": "${var.environment}",
                    "managed-by": "terraform"
                  },
                  "throughput_tier": "${var.throughput_tier}",
                  "zones": "${var.zones}"
                }
              references:
                name: var.cluster_name
                network_id: redpanda_network.test.id
                region: var.region
                resource_group_id: redpanda_resource_group.test.id
                throughput_tier: var.throughput_tier
                zones: var.zones
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_network.test: |-
                    {
                      "cloud_provider": "gcp",
                      "cluster_type": "byoc",
                      "customer_managed_resources": {
                        "gcp": {
                          "management_bucket": {
                            "name": "${module.redpanda_gcp.management_bucket_name}"
                          },
                          "network_name": "${module.redpanda_gcp.network_name}",
                          "network_project_id": "${var.project_id}"
                        }
                      },
                      "depends_on": [
                        "${module.redpanda_gcp}"
                      ],
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
        argumentDocs:
            agent_instance_profile: (Attributes) (see below for nested schema)
            agent_service_account: (Attributes) GCP service account for the agent. (see below for nested schema)
            allow_deletion: (Boolean) Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
            allowed_principals: (List of String) The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
            allowed_subscriptions: (List of String) The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
            anytime: (Boolean) If true, maintenance can occur at any time.
            approved_subscriptions: (List of String) List of approved Azure subscription IDs.
            arn: (String) ARN for the agent instance profile
            aws: (Attributes) (see below for nested schema)
            aws_private_link: (Attributes) AWS PrivateLink configuration. (see below for nested schema)
            azure_private_link: (Attributes) Azure Private Link configuration. (see below for nested schema)
            ca_certificates_pem: (List of String) CA certificate in PEM format.
            cloud_provider: (String) Cloud provider where resources are created.
            cloud_storage_bucket: (Attributes) (see below for nested schema)
            cluster_api_url: (String) The URL of the cluster API.
            cluster_security_group: (Attributes) (see below for nested schema)
            cluster_type: (String) Cluster type. Type is immutable and can only be set on cluster creation.
            code: (Number) Error code if cluster is in error state.
            connect_console: (Boolean) Whether Console is connected via PrivateLink.
            connected_endpoints: (Attributes List) List of connected endpoints. (see below for nested schema)
            connection_id: (String) The connection ID.
            connection_name: (String) Name of the connection.
            connection_type: (String) Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
            connector_service_account: (Attributes) GCP service account for managed connectors. (see below for nested schema)
            connectors_node_group_instance_profile: (Attributes) (see below for nested schema)
            connectors_security_group: (Attributes) (see below for nested schema)
            console_port: (Number) Port for Redpanda Console.
            console_service_account: (Attributes) GCP service account for Redpanda Console. (see below for nested schema)
            consumer_accept_list: (Attributes List) List of consumers that are allowed to connect to Redpanda GCP PSC (Private Service Connect) service attachment. (see below for nested schema)
            consumer_network: (String) The consumer network.
            created_at: (String) Timestamp when the cluster was created.
            customer_managed_resources: (Attributes) Customer managed resources configuration for the cluster. (see below for nested schema)
            day_hour: (Attributes) (see below for nested schema)
            day_of_week: (String) Day of week.
            deleted_at: (String) When the PrivateLink service was deleted.
            dns_a_record: (String) DNS A record for the service.
            dns_a_records: (List of String) DNS A records for the service.
            dns_entries: (Attributes List) DNS entries for the endpoint. (see below for nested schema)
            dns_name: (String) The DNS name.
            email: (String) GCP service account email.
            enabled: (Boolean) Whether AWS PrivateLink is enabled.
            endpoint: (String) The endpoint address.
            gcp: (Attributes) (see below for nested schema)
            gcp_global_access_enabled: (Boolean) If true, GCP global access is enabled.
            gcp_private_service_connect: (Attributes) GCP Private Service Connect configuration. (see below for nested schema)
            gke_service_account: (Attributes) GCP service account for GCP Kubernetes Engine (GKE). (see below for nested schema)
            global_access_enabled: (Boolean) Whether global access is enabled.
            hosted_zone_id: (String) The hosted zone ID.
            hour_of_day: (Number) Hour of day.
            http_proxy: (Attributes) HTTP Proxy properties. (see below for nested schema)
            id: (String) ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
            k8s_cluster_role: (Attributes) (see below for nested schema)
            k8s_master_ipv4_range: (String) Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
            kafka_api: (Attributes) Cluster's Kafka API properties. (see below for nested schema)
            kafka_api_node_base_port: (Number) Base port for Kafka API nodes.
            kafka_api_seed_port: (Number) Port for Kafka API seed brokers.
            kafka_connect: (Attributes) Kafka Connect configuration. (see below for nested schema)
            load_balancer_arns: (List of String) ARNs of associated load balancers.
            maintenance_window_config: (Attributes) Maintenance window configuration for the cluster. (see below for nested schema)
            message: (String) Detailed error message if cluster is in error state.
            mtls: (Attributes) mTLS configuration. (see below for nested schema)
            name: (String) Unique name of the cluster.
            network_id: (String) Network ID where cluster is placed.
            node_security_group: (Attributes) (see below for nested schema)
            owner: (String) Owner of the endpoint connection.
            permissions_boundary_policy: (Attributes) (see below for nested schema)
            principal_mapping_rules: (List of String) Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
            private_endpoint_connections: (Attributes List) List of private endpoint connections. (see below for nested schema)
            private_endpoint_id: (String) ID of the private endpoint.
            private_endpoint_name: (String) Name of the private endpoint.
            prometheus: (Attributes) Prometheus metrics endpoint properties. (see below for nested schema)
            psc_nat_subnet_name: (String) NAT subnet name if GCP Private Service Connect is enabled.
            read_replica_cluster_ids: (List of String) IDs of clusters that can create read-only topics from this cluster.
            redpanda_agent_security_group: (Attributes) (see below for nested schema)
            redpanda_cluster_service_account: (Attributes) GCP service account for the Redpanda cluster. (see below for nested schema)
            redpanda_console: (Attributes) Redpanda Console properties. (see below for nested schema)
            redpanda_node_group_instance_profile: (Attributes) (see below for nested schema)
            redpanda_node_group_security_group: (Attributes) (see below for nested schema)
            redpanda_proxy_node_base_port: (Number) Base port for HTTP proxy nodes.
            redpanda_proxy_seed_port: (Number) Port for HTTP proxy.
            redpanda_version: (String) Current Redpanda version of the cluster.
            region: (String) Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
            resource_group_id: (String) Resource group ID of the cluster.
            schema_registry: (Attributes) Schema Registry properties. (see below for nested schema)
            schema_registry_seed_port: (Number) Port for Schema Registry.
            secondary_ipv4_range_pods: (Attributes) Secondary IPv4 range for pods. (see below for nested schema)
            secondary_ipv4_range_services: (Attributes) Secondary IPv4 range for services. (see below for nested schema)
            seed_brokers: (List of String) List of Kafka broker addresses.
            seed_hostname: (String) Hostname for the seed brokers.
            service_attachment: (String) The service attachment identifier.
            service_id: (String) The PrivateLink service ID.
            service_name: (String) The PrivateLink service name.
            service_state: (String) Current state of the PrivateLink service.
            source: (String) Either the GCP project number or its alphanumeric ID.
            state: (String) Current state of the cluster.
            state_description: (Attributes) Detailed state description when cluster is in a non-ready state. (see below for nested schema)
            status: (Attributes) Current status of the PrivateLink configuration. (see below for nested schema)
            subnet: (Attributes) GCP subnet where Redpanda cluster is deployed. (see below for nested schema)
            tags: '(Map of String) Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix "gcp.network-tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.'
            throughput_tier: (String) Throughput tier of the cluster.
            tiered_storage_bucket: (Attributes) GCP storage bucket for Tiered storage. (see below for nested schema)
            unspecified: (Boolean) If true, maintenance window is unspecified.
            url: (String) The HTTP Proxy URL.
            utility_node_group_instance_profile: (Attributes) (see below for nested schema)
            utility_security_group: (Attributes) (see below for nested schema)
            vpc_endpoint_connections: (Attributes List) List of VPC endpoint connections. (see below for nested schema)
            zones: (List of String) Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
        importStatements:
            - terraform import redpanda_cluster.example clusterId
    redpanda_network:
        subCategory: ""
        name: redpanda_network
        title: redpanda_network Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "cidr_block": "10.0.0.0/20",
                  "cloud_provider": "${var.cloud_provider}",
                  "cluster_type": "dedicated",
                  "name": "${var.network_name}",
                  "region": "${var.region}",
                  "resource_group_id": "${redpanda_resource_group.test.id}"
                }
              references:
                cloud_provider: var.cloud_provider
                name: var.network_name
                region: var.region
                resource_group_id: redpanda_resource_group.test.id
              dependencies:
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
        argumentDocs:
            arn: (String) AWS DynamoDB table identifier
            arns: (List of String) AWS private subnet identifiers
            aws: (Attributes) (see below for nested schema)
            cidr_block: (String) The cidr_block to create the network in
            cloud_provider: (String) The cloud provider to create the network in.
            cluster_type: (String) The type of cluster this network is associated with, can be one of dedicated or cloud
            customer_managed_resources: (Attributes) (see below for nested schema)
            dynamodb_table: (Attributes) (see below for nested schema)
            gcp: (Attributes) (see below for nested schema)
            id: (String) The ID of the network
            management_bucket: (Attributes) (see below for nested schema)
            name: (String) Name of the network
            network_name: (String) Name of user-created network where the Redpanda cluster is deployed
            network_project_id: (String) GCP project ID where the network is created
            private_subnets: (Attributes) (see below for nested schema)
            region: (String) The region to create the network in.
            resource_group_id: (String) The ID of the resource group in which to create the network
            vpc: (Attributes) (see below for nested schema)
        importStatements:
            - terraform import redpanda_network.example networkId
    redpanda_resource_group:
        subCategory: ""
        description: A Redpanda Cloud resource group
        name: redpanda_resource_group
        title: redpanda_resource_group Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "name": "${var.resource_group_name}"
                }
              references:
                name: var.resource_group_name
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_cluster.test: |-
                    {
                      "allow_deletion": true,
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "connection_type": "public",
                      "name": "${var.cluster_name}",
                      "network_id": "${redpanda_network.test.id}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}",
                      "tags": {
                        "key": "value"
                      },
                      "throughput_tier": "${var.throughput_tier}",
                      "zones": "${var.zones}"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
        argumentDocs:
            id: (String) UUID of the resource group
            name: (String) Name of the resource group. Changing the name of a resource group will result in a new resource group being created and the old one being destroyed
        importStatements:
            - terraform import redpanda_resource_group.example resourcegroupId
    redpanda_serverless_cluster:
        subCategory: ""
        name: redpanda_serverless_cluster
        title: redpanda_serverless_cluster Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "name": "${var.cluster_name}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "serverless_region": "${var.region}"
                }
              references:
                name: var.cluster_name
                resource_group_id: redpanda_resource_group.test.id
                serverless_region: var.region
              dependencies:
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
            - name: test
              manifest: |-
                {
                  "name": "${var.cluster_name}",
                  "resource_group_id": "${redpanda_resource_group.test.id}",
                  "serverless_region": "${var.region}"
                }
              references:
                name: var.cluster_name
                resource_group_id: redpanda_resource_group.test.id
                serverless_region: var.region
              dependencies:
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
        argumentDocs:
            cluster_api_url: (String) The URL of the dataplane API for the serverless cluster
            id: (String) The ID of the serverless cluster
            name: (String) Name of the serverless cluster
            resource_group_id: (String) The ID of the Resource Group in which to create the serverless cluster
            serverless_region: (String) Redpanda specific region of the serverless cluster
        importStatements:
            - terraform import redpanda_serverless_cluster.example serverlessClusterId
    redpanda_topic:
        subCategory: ""
        description: Topic represents a Kafka topic configuration
        name: redpanda_topic
        title: redpanda_topic Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "allow_deletion": true,
                  "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                  "name": "${var.topic_name}",
                  "partition_count": "${var.partition_count}",
                  "replication_factor": "${var.replication_factor}"
                }
              references:
                cluster_api_url: redpanda_cluster.test.cluster_api_url
                name: var.topic_name
                partition_count: var.partition_count
                replication_factor: var.replication_factor
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_cluster.test: |-
                    {
                      "allow_deletion": true,
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "connection_type": "public",
                      "name": "${var.cluster_name}",
                      "network_id": "${redpanda_network.test.id}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}",
                      "tags": {
                        "key": "value"
                      },
                      "throughput_tier": "${var.throughput_tier}",
                      "zones": "${var.zones}"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_user.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "mechanism": "${var.mechanism}",
                      "name": "${var.user_name}",
                      "password": "${var.user_pw}"
                    }
        argumentDocs:
            allow_deletion: (Boolean) Indicates whether the topic can be deleted.
            cluster_api_url: (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
            configuration: (Map of String) A map of string key/value pairs of topic configurations.
            id: (String) The ID of this resource.
            name: (String) The name of the topic.
            partition_count: (Number) The number of partitions for the topic. This determines how the data is distributed across brokers. Increases are fully supported without data loss, decreases will result in an error and should be accomplished by creating a new topic and migrating the data.
            replication_factor: (Number) The replication factor for the topic, which defines how many copies of the data are kept across different brokers for fault tolerance.
        importStatements:
            - terraform import redpanda_topic.example topicName,clusterId
    redpanda_user:
        subCategory: ""
        description: User is a user that can be created in Redpanda
        name: redpanda_user
        title: redpanda_user Resource - terraform-provider-redpanda
        examples:
            - name: test
              manifest: |-
                {
                  "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                  "mechanism": "${var.mechanism}",
                  "name": "${var.user_name}",
                  "password": "${var.user_pw}"
                }
              references:
                cluster_api_url: redpanda_cluster.test.cluster_api_url
                mechanism: var.mechanism
                name: var.user_name
                password: var.user_pw
              dependencies:
                redpanda_acl.test: |-
                    {
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "host": "*",
                      "operation": "READ",
                      "permission_type": "ALLOW",
                      "principal": "User:${redpanda_user.test.name}",
                      "resource_name": "${redpanda_topic.test.name}",
                      "resource_pattern_type": "LITERAL",
                      "resource_type": "TOPIC"
                    }
                redpanda_cluster.test: |-
                    {
                      "allow_deletion": true,
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "connection_type": "public",
                      "name": "${var.cluster_name}",
                      "network_id": "${redpanda_network.test.id}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}",
                      "tags": {
                        "key": "value"
                      },
                      "throughput_tier": "${var.throughput_tier}",
                      "zones": "${var.zones}"
                    }
                redpanda_network.test: |-
                    {
                      "cidr_block": "10.0.0.0/20",
                      "cloud_provider": "${var.cloud_provider}",
                      "cluster_type": "dedicated",
                      "name": "${var.network_name}",
                      "region": "${var.region}",
                      "resource_group_id": "${redpanda_resource_group.test.id}"
                    }
                redpanda_resource_group.test: |-
                    {
                      "name": "${var.resource_group_name}"
                    }
                redpanda_topic.test: |-
                    {
                      "allow_deletion": true,
                      "cluster_api_url": "${redpanda_cluster.test.cluster_api_url}",
                      "name": "${var.topic_name}",
                      "partition_count": "${var.partition_count}",
                      "replication_factor": "${var.replication_factor}"
                    }
        argumentDocs:
            cluster_api_url: (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
            id: (String) The ID of this resource.
            mechanism: (String) Which authentication method to use, see https://docs.redpanda.com/current/manage/security/authentication/ for more information
            name: (String) Name of the user, must be unique
            password: (String, Sensitive) Password of the user
        importStatements:
            - terraform import redpanda_user.example userName,clusterId
