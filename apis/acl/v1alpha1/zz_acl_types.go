// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLInitParameters struct {

	// (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	ClusterAPIURL *string `json:"clusterApiUrl,omitempty" tf:"cluster_api_url,omitempty"`

	// (String) The host address to use for this ACL
	// The host address to use for this ACL
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The operation type that shall be allowed or denied (e.g READ)
	// The operation type that shall be allowed or denied (e.g READ)
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// (String) The permission type. It determines whether the operation should be ALLOWED or DENIED
	// The permission type. It determines whether the operation should be ALLOWED or DENIED
	PermissionType *string `json:"permissionType,omitempty" tf:"permission_type,omitempty"`

	// (String) The principal to apply this ACL for
	// The principal to apply this ACL for
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// (String) The name of the resource this ACL entry will be on
	// The name of the resource this ACL entry will be on
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// (String) The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	ResourcePatternType *string `json:"resourcePatternType,omitempty" tf:"resource_pattern_type,omitempty"`

	// (String) The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type ACLObservation struct {

	// (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	ClusterAPIURL *string `json:"clusterApiUrl,omitempty" tf:"cluster_api_url,omitempty"`

	// (String) The host address to use for this ACL
	// The host address to use for this ACL
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The operation type that shall be allowed or denied (e.g READ)
	// The operation type that shall be allowed or denied (e.g READ)
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// (String) The permission type. It determines whether the operation should be ALLOWED or DENIED
	// The permission type. It determines whether the operation should be ALLOWED or DENIED
	PermissionType *string `json:"permissionType,omitempty" tf:"permission_type,omitempty"`

	// (String) The principal to apply this ACL for
	// The principal to apply this ACL for
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// (String) The name of the resource this ACL entry will be on
	// The name of the resource this ACL entry will be on
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// (String) The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	ResourcePatternType *string `json:"resourcePatternType,omitempty" tf:"resource_pattern_type,omitempty"`

	// (String) The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type ACLParameters struct {

	// (String) The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	// The cluster API URL. Changing this will prevent deletion of the resource on the existing cluster. It is generally a better idea to delete an existing resource and create a new one than to change this value unless you are planning to do state imports
	// +kubebuilder:validation:Optional
	ClusterAPIURL *string `json:"clusterApiUrl,omitempty" tf:"cluster_api_url,omitempty"`

	// (String) The host address to use for this ACL
	// The host address to use for this ACL
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The operation type that shall be allowed or denied (e.g READ)
	// The operation type that shall be allowed or denied (e.g READ)
	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// (String) The permission type. It determines whether the operation should be ALLOWED or DENIED
	// The permission type. It determines whether the operation should be ALLOWED or DENIED
	// +kubebuilder:validation:Optional
	PermissionType *string `json:"permissionType,omitempty" tf:"permission_type,omitempty"`

	// (String) The principal to apply this ACL for
	// The principal to apply this ACL for
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// (String) The name of the resource this ACL entry will be on
	// The name of the resource this ACL entry will be on
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// (String) The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	// The pattern type of the resource. It determines the strategy how the provided resource name is matched (LITERAL, MATCH, PREFIXED, etc ...) against the actual resource names
	// +kubebuilder:validation:Optional
	ResourcePatternType *string `json:"resourcePatternType,omitempty" tf:"resource_pattern_type,omitempty"`

	// (String) The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	// The type of the resource (TOPIC, GROUP, etc...) this ACL shall target
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

// ACLSpec defines the desired state of ACL
type ACLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ACLInitParameters `json:"initProvider,omitempty"`
}

// ACLStatus defines the observed state of ACL.
type ACLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ACL is the Schema for the ACLs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,redpanda}
type ACL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterApiUrl) || (has(self.initProvider) && has(self.initProvider.clusterApiUrl))",message="spec.forProvider.clusterApiUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operation) || (has(self.initProvider) && has(self.initProvider.operation))",message="spec.forProvider.operation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissionType) || (has(self.initProvider) && has(self.initProvider.permissionType))",message="spec.forProvider.permissionType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceName) || (has(self.initProvider) && has(self.initProvider.resourceName))",message="spec.forProvider.resourceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourcePatternType) || (has(self.initProvider) && has(self.initProvider.resourcePatternType))",message="spec.forProvider.resourcePatternType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	Spec   ACLSpec   `json:"spec"`
	Status ACLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLList contains a list of ACLs
type ACLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACL `json:"items"`
}

// Repository type metadata.
var (
	ACL_Kind             = "ACL"
	ACL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACL_Kind}.String()
	ACL_KindAPIVersion   = ACL_Kind + "." + CRDGroupVersion.String()
	ACL_GroupVersionKind = CRDGroupVersion.WithKind(ACL_Kind)
)

func init() {
	SchemeBuilder.Register(&ACL{}, &ACLList{})
}
