// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterInitParameters struct {

	// (Boolean) Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	// Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	AllowDeletion *bool `json:"allowDeletion,omitempty" tf:"allow_deletion,omitempty"`

	// (String) Cloud provider where resources are created.
	// Cloud provider where resources are created.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// (String) Cluster type. Type is immutable and can only be set on cluster creation.
	// Cluster type. Type is immutable and can only be set on cluster creation.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// practice.
	// Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// (Boolean) If true, GCP global access is enabled.
	// If true, GCP global access is enabled.
	GCPGlobalAccessEnabled *bool `json:"gcpGlobalAccessEnabled,omitempty" tf:"gcp_global_access_enabled,omitempty"`

	// (String) Network ID where cluster is placed.
	// Network ID where cluster is placed.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// only topics from this cluster.
	// IDs of clusters that can create read-only topics from this cluster.
	ReadReplicaClusterIds []*string `json:"readReplicaClusterIds,omitempty" tf:"read_replica_cluster_ids,omitempty"`

	// (String) Current Redpanda version of the cluster.
	// Current Redpanda version of the cluster.
	RedpandaVersion *string `json:"redpandaVersion,omitempty" tf:"redpanda_version,omitempty"`

	// (String) Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	// Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Resource group ID of the cluster.
	// Resource group ID of the cluster.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix "gcp.network-tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Throughput tier of the cluster.
	// Throughput tier of the cluster.
	ThroughputTier *string `json:"throughputTier,omitempty" tf:"throughput_tier,omitempty"`

	// AZ cluster.
	// Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type ClusterObservation struct {

	// (Boolean) Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	// Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	AllowDeletion *bool `json:"allowDeletion,omitempty" tf:"allow_deletion,omitempty"`

	// (String) Cloud provider where resources are created.
	// Cloud provider where resources are created.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// (String) The URL of the cluster API.
	// The URL of the cluster API.
	ClusterAPIURL *string `json:"clusterApiUrl,omitempty" tf:"cluster_api_url,omitempty"`

	// (String) Cluster type. Type is immutable and can only be set on cluster creation.
	// Cluster type. Type is immutable and can only be set on cluster creation.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// practice.
	// Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// (String) Timestamp when the cluster was created.
	// Timestamp when the cluster was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) If true, GCP global access is enabled.
	// If true, GCP global access is enabled.
	GCPGlobalAccessEnabled *bool `json:"gcpGlobalAccessEnabled,omitempty" tf:"gcp_global_access_enabled,omitempty"`

	// (String) ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Network ID where cluster is placed.
	// Network ID where cluster is placed.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// only topics from this cluster.
	// IDs of clusters that can create read-only topics from this cluster.
	ReadReplicaClusterIds []*string `json:"readReplicaClusterIds,omitempty" tf:"read_replica_cluster_ids,omitempty"`

	// (String) Current Redpanda version of the cluster.
	// Current Redpanda version of the cluster.
	RedpandaVersion *string `json:"redpandaVersion,omitempty" tf:"redpanda_version,omitempty"`

	// (String) Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	// Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Resource group ID of the cluster.
	// Resource group ID of the cluster.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// (String) Current state of the cluster.
	// Current state of the cluster.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix "gcp.network-tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Throughput tier of the cluster.
	// Throughput tier of the cluster.
	ThroughputTier *string `json:"throughputTier,omitempty" tf:"throughput_tier,omitempty"`

	// AZ cluster.
	// Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type ClusterParameters struct {

	// (Boolean) Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	// Allows deletion of the cluster. Defaults to true. Should probably be set to false for production use.
	// +kubebuilder:validation:Optional
	AllowDeletion *bool `json:"allowDeletion,omitempty" tf:"allow_deletion,omitempty"`

	// (String) Cloud provider where resources are created.
	// Cloud provider where resources are created.
	// +kubebuilder:validation:Optional
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// (String) Cluster type. Type is immutable and can only be set on cluster creation.
	// Cluster type. Type is immutable and can only be set on cluster creation.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// practice.
	// Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
	// +kubebuilder:validation:Optional
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// (Boolean) If true, GCP global access is enabled.
	// If true, GCP global access is enabled.
	// +kubebuilder:validation:Optional
	GCPGlobalAccessEnabled *bool `json:"gcpGlobalAccessEnabled,omitempty" tf:"gcp_global_access_enabled,omitempty"`

	// (String) Network ID where cluster is placed.
	// Network ID where cluster is placed.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// only topics from this cluster.
	// IDs of clusters that can create read-only topics from this cluster.
	// +kubebuilder:validation:Optional
	ReadReplicaClusterIds []*string `json:"readReplicaClusterIds,omitempty" tf:"read_replica_cluster_ids,omitempty"`

	// (String) Current Redpanda version of the cluster.
	// Current Redpanda version of the cluster.
	// +kubebuilder:validation:Optional
	RedpandaVersion *string `json:"redpandaVersion,omitempty" tf:"redpanda_version,omitempty"`

	// (String) Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	// Cloud provider region. Region represents the name of the region where the cluster will be provisioned.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Resource group ID of the cluster.
	// Resource group ID of the cluster.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// Tags placed on cloud resources. If the cloud provider is GCP and the name of a tag has the prefix "gcp.network-tag.", the tag is a network tag that will be added to the Redpanda cluster GKE nodes. Otherwise, the tag is a normal tag. For example, if the name of a tag is "gcp.network-tag.network-tag-foo", the network tag named "network-tag-foo" will be added to the Redpanda cluster GKE nodes. Note: The value of a network tag will be ignored. See the details on network tags at https://cloud.google.com/vpc/docs/add-remove-network-tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Throughput tier of the cluster.
	// Throughput tier of the cluster.
	// +kubebuilder:validation:Optional
	ThroughputTier *string `json:"throughputTier,omitempty" tf:"throughput_tier,omitempty"`

	// AZ cluster.
	// Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,redpanda}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterType) || (has(self.initProvider) && has(self.initProvider.clusterType))",message="spec.forProvider.clusterType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionType) || (has(self.initProvider) && has(self.initProvider.connectionType))",message="spec.forProvider.connectionType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkId) || (has(self.initProvider) && has(self.initProvider.networkId))",message="spec.forProvider.networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceGroupId) || (has(self.initProvider) && has(self.initProvider.resourceGroupId))",message="spec.forProvider.resourceGroupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.throughputTier) || (has(self.initProvider) && has(self.initProvider.throughputTier))",message="spec.forProvider.throughputTier is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
